version: "3.2"

volumes:
  prometheus_data: {}

services:

  #back-end Spring Boot Application for Axon service
  axonserver:
    image: axoniq/axonserver
    hostname: axonserver
    ports:
      - "8024:8024"
    networks:
      - microservice-network


  #back-end Spring Boot Application for service registry
  service-registry:
    image: service-registry
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER=http://service-registry:8761/eureka
        -DZIPKIN_SERVER=http://zipkin:9411/
    ports:
      - "8761:8761"
    networks:
      - microservice-network
    volumes:
      - type: bind
        source: /Users/user/Desktop/kieker/
        target: /home

  #back-end Spring Boot Application for api gateway service
  api-gateway:
    #the docker file in scrum-app build the jar and provides the docker image with the following name.
    image: api-gateway
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER=http://service-registry:8761/eureka
        -DZIPKIN_SERVER=http://zipkin:9411/
    ports:
      - "9190:9190" # Forward the exposed port 8080 to the container to port 8080 on the host machine
    networks:
      - microservice-network
    depends_on:
      - service-registry
      - authentication-service
      - order-service
      - payment-service
      - cart-service
      - user-service
    volumes:
      - type: bind
        source: /Users/user/Desktop/kieker/
        target: /home

  #back-end Spring Boot Application for authentication service
  authentication-service:
    image: authentication-service
    ports:
      - "9191:9191"
    networks:
      - microservice-network
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER=http://service-registry:8761/eureka
        -DZIPKIN_SERVER=http://zipkin:9411/
    volumes:
      - type: bind
        source: /Users/user/Desktop/kieker/
        target: /home

  #back-end Spring Boot Application for order service
  order-service:
    #the docker file in scrum-app build the jar and provides the docker image with the following name.
    image: order-service
    ports:
      - "9192:9192" # Forward the exposed port 8080 to the container to port 8080 on the host machine
    networks:
      - microservice-network
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER=http://service-registry:8761/eureka
        -DZIPKIN_SERVER=http://zipkin:9411/
    volumes:
      - type: bind
        source: /Users/user/Desktop/kieker/
        target: /home

  #back-end Spring Boot Application for payment service
  payment-service:
    #the docker file in scrum-app build the jar and provides the docker image with the following name.
    image: payment-service
    ports:
      - "9193:9193" # Forward the exposed port 8080 to the container to port 8080 on the host machin
    networks:
      - microservice-network
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER=http://service-registry:8761/eureka
        -DZIPKIN_SERVER=http://zipkin:9411/
    volumes:
      - type: bind
        source: /Users/user/Desktop/kieker/
        target: /home

  #back-end Spring Boot Application for cart service
  cart-service:
    #the docker file in scrum-app build the jar and provides the docker image with the following name.
    image: cart-service
    ports:
      - "9194:9194" # Forward the exposed port 8080 to the container to port 8080 on the host machine
    networks:
      - microservice-network
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER=http://service-registry:8761/eureka
        -DZIPKIN_SERVER=http://zipkin:9411/
    volumes:
      - type: bind
        source: /Users/user/Desktop/kieker/
        target: /home

  #back-end Spring Boot Application for cart service
  user-service:
    #the docker file in scrum-app build the jar and provides the docker image with the following name.
    image: user-service
    ports:
      - "9196:9196" # Forward the exposed port 8080 to the container to port 8080 on the host machine
    networks:
      - microservice-network
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER=http://service-registry:8761/eureka
        -DZIPKIN_SERVER=http://zipkin:9411/
    volumes:
      - type: bind
        source: /Users/user/Desktop/kieker/
        target: /home

  prometheus:
    image: prom/prometheus
    volumes:
      - ./config/:/etc/prometheus
      - ./data/prometheus:/data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=31d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    depends_on:
      - service-registry
    networks:
      - microservice-network

  zipkin:
    image: openzipkin/zipkin
    environment:
      - STORAGE_TYPE=mem
    ports:
      - "9411:9411"
    depends_on:
      - service-registry
    networks:
      - microservice-network

  grafan:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - microservice-network

networks:
  microservice-network:


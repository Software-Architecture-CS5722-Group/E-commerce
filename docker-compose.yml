version: '3.3'
services:

# @Todo Add ELK Stack Docker image
# @Todo add Kafaka docker image
# @Todo add Jenkins image
# @Todo add Hystric Dashboard service

  docker-mysql:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql
    networks:
      - microservice-network

  #back-end Spring Boot Application for Axon service
  axonserver:
    image: axoniq/axonserver
    hostname: axonserver
    environment:
      - AXONSERVER_HOSTNAME=axonserver
    ports:
      - 8024:8024
    networks:
      - microservice-network

  #back-end Spring Boot Application for Axon service
  authentication-service:
    build: ./authentication-service
    container_name: authentication-service
    environment:
      - AXONSERVER_HOSTNAME=axonserver
    ports:
      - 8024:8024
    depends_on:
      - docker-mysql
      - service-registry
      - authentication-service
    networks:
      - microservice-network

  #back-end Spring Boot Application for order service
  api-gateway:
    #the docker file in scrum-app build the jar and provides the docker image with the following name.
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - 9192:9192 # Forward the exposed port 8080 to the container to port 8080 on the host machine
    depends_on:
      - service-registry
      - docker-mysql
    networks:
      - microservice-network
    restart: "on-failure"

  #back-end Spring Boot Application for order service
  order-service:
    #the docker file in scrum-app build the jar and provides the docker image with the following name.
    build: ./order-service
    container_name: order-service
    ports:
      - 9192:9192 # Forward the exposed port 8080 to the container to port 8080 on the host machine
    depends_on:
      - service-registry
      - authentication-service
    networks:
      - microservice-network
    restart: "on-failure"


  #back-end Spring Boot Application for payment service
  payment-service:
    #the docker file in scrum-app build the jar and provides the docker image with the following name.
    build: ./payment-service
    container_name: payment-service
    ports:
      - 9191:9191 # Forward the exposed port 8080 to the container to port 8080 on the host machine
    depends_on:
      - service-registry
      - authentication-service
    networks:
      - microservice-network
    restart: "on-failure"

  #back-end Spring Boot Application for product service
  product-service:
    #the docker file in scrum-app build the jar and provides the docker image with the following name.
    build: ./product-service
    container_name: product-service
    environment:
      - AXONSERVER_HOST=axonserver
    ports:
      - 9194:9194 # Forward the exposed port 8080 to the container to port 8080 on the host machine
    depends_on:
      - service-registry
      - authentication-service
      - axonserver
    links:
      - axonserver
    networks:
      - microservice-network
    restart: "on-failure"

  #back-end Spring Boot Application for cart service
  cart-service:
    #the docker file in scrum-app build the jar and provides the docker image with the following name.
    build: ./cart-service
    container_name: cart-service
    ports:
      - 9193:9193 # Forward the exposed port 8080 to the container to port 8080 on the host machine
    networks:
      - microservice-network
    depends_on:
      - service-registry

  user-service:
    #the docker file in scrum-app build the jar and provides the docker image with the following name.
    build: ./user-service
    container_name: user-service
    ports:
      - 9193:9193 # Forward the exposed port 8080 to the container to port 8080 on the host machine
    networks:
      - microservice-network
    depends_on:
      - service-registry

# Names our volume
volumes:
  my-db:

# Services Network
networks:
  microservice-network:

